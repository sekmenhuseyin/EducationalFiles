<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta name="author" content="Computer training courseware and elearning."></meta><meta name="keywords" content="Computer training courseware and elearning."></meta>
<title>Microsoft FrontPage 2000 - Creating Web Pages and Web Sites</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}



function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#bbbbee';



var PageBGColor = '#ffffff';



var NavBarColor = '#000066';


var TextColor = '#000000';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = ':-(';
var YourScoreIs = 'Your score is ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';var ExerciseTitle = 'Microsoft FrontPage 2000 - Creating Web Pages and Web Sites';
var ExerciseSubtitle = 'Multiple-choice exercise';
var Instructions = 'Choose the correct answer for each question.'; //'';
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 12;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#000066" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';


NavBar+='<input type="button" value="Quiz Index" onclick=\'parent.location="mos.htm"\'></input>';


NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#bbbbee" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000000">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#bbbbee"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#bbbbee" ><input type="button" value="Check"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#bbbbee" align="center">';
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='When planning a web site, it is a good idea to make the pages more interesting by making them all different. (True or False?)';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='True';
I[0][1][0][1]='False. A Web site that is inconsistent in how it looks is confusing and frustrating to readers.';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='False';
I[0][1][1][1]='False. A Web site that is inconsistent in how it looks is confusing and frustrating to readers.';
I[0][1][1][2] = 1;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='What is one way to save time when creating a Web site? (Select all that apply.)';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='Use a Web site Template.';
I[1][1][0][1]='Correct';
I[1][1][0][2] = 1;
I[1][1][1] = new Array();
I[1][1][1][0]='Use a Web site Magician.';
I[1][1][1][1]='Correct';
I[1][1][1][2] = 1;
I[1][1][2] = new Array();
I[1][1][2][0]='Use a Web site Wizard.';
I[1][1][2][1]='Correct';
I[1][1][2][2] = 1;
I[1][1][3] = new Array();
I[1][1][3][0]='Import an existing Web site.';
I[1][1][3][1]='Incorrect';
I[1][1][3][2] = 0;
I[1][2] = 1;

I[2] = new Array();
I[2][0]='What keystroke combination starts a new line in a paragraph?';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='[Alt] + [A].';
I[2][1][0][1]='Incorrect';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='[Shift] + [Enter].';
I[2][1][1][1]='Right!!!';
I[2][1][1][2] = 1;
I[2][1][2] = new Array();
I[2][1][2][0]='[Ctrl] + [A].';
I[2][1][2][1]='Incorrect';
I[2][1][2][2] = 0;
I[2][1][3] = new Array();
I[2][1][3][0]='[Ctrl] + [L].';
I[2][1][3][1]='Incorrect';
I[2][1][3][2] = 0;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='The Backspace key deletes text to the left of (or behind) the insertion point. (True or False?)';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='True';
I[3][1][0][1]='True. The Backspace key deletes text to the left of (or behind) the insertion point. The Delete key deletes text to the right of (or before) the insertion point.';
I[3][1][0][2] = 1;
I[3][1][1] = new Array();
I[3][1][1][0]='False';
I[3][1][1][1]='True. The Backspace key deletes text to the left of (or behind) the insertion point. The Delete key deletes text to the right of (or before) the insertion point.';
I[3][1][1][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='To view a list of suggestions for a misspelled word:';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Select the misspelled word and select Tools --> Suggestions from the menu.';
I[4][1][0][1]='Incorrect';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='Press [Ctrl] + [S].';
I[4][1][1][1]='Correct';
I[4][1][1][2] = 1;
I[4][1][2] = new Array();
I[4][1][2][0]='Select the misspelled word and click the Spelling Suggestion button on the Standard toolbar.';
I[4][1][2][1]='Incorrect';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='Right-click the misspelled word.';
I[4][1][3][1]='Incorrect';
I[4][1][3][2] = 0;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='You\'ve accidentally deleted the paragraph you just completed. How can you retrieve the lost text?';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='Select Help and send Rover the Search Companion to find the text on your computer.';
I[5][1][0][1]='Incorrect';
I[5][1][0][2] = 0;
I[5][1][1] = new Array();
I[5][1][1][0]='Click the Undo button on the Standard toolbar.';
I[5][1][1][1]='Correct';
I[5][1][1][2] = 1;
I[5][1][2] = new Array();
I[5][1][2][0]='Go to Preview view to catch it before it is deleted from all three views.';
I[5][1][2][1]='Incorrect';
I[5][1][2][2] = 0;
I[5][1][3] = new Array();
I[5][1][3][0]='You can\'t do anything about it.';
I[5][1][3][1]='Incorrect';
I[5][1][3][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='You\'re designing your home page, and you want people to be impressed with your vocabulary. How can you easily replace every instance of the word "speedy" with "rakish?"';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Select Edit --> Replace from the menu, type "speedy" in the Find what box, type "rakish" in the Replace with box and click Replace All.';
I[6][1][0][1]='Right!';
I[6][1][0][2] = 1;
I[6][1][1] = new Array();
I[6][1][1][0]='There isn\'t any easy way - you\'ll have to go through your novel and replace the words yourself.';
I[6][1][1][1]='Incorrect';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Click the Find and Replace button on the Standard toolbar, then follow the Find and Replace Wizard\'s on-screen instructions to replace the word.';
I[6][1][2][1]='Incorrect';
I[6][1][2][2] = 0;
I[6][1][3] = new Array();
I[6][1][3][0]='Select Tools --> Replace from the menu, type "speedy" in the Find what box, type "rakish" in the Replace with box and click Replace All.';
I[6][1][3][1]='Incorrect';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='Which of the following is not a command to cut text or graphics? ';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='Click the Cut button on the Standard toolbar. ';
I[7][1][0][1]='Incorrect';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='Press [Ctrl] + [C].';
I[7][1][1][1]='Correct';
I[7][1][1][2] = 1;
I[7][1][2] = new Array();
I[7][1][2][0]='Press [Ctrl] + [X].';
I[7][1][2][1]='Incorrect';
I[7][1][2][2] = 0;
I[7][1][3] = new Array();
I[7][1][3][0]='Select Edit --> Cut from the menu.';
I[7][1][3][1]='Incorrect';
I[7][1][3][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='How can you create a blank new page? (Select all that apply.)';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Select File --> New --> Page from the menu, select a template from the dialog box, and click OK.';
I[8][1][0][1]='Correct';
I[8][1][0][2] = 1;
I[8][1][1] = new Array();
I[8][1][1][0]='Press [Ctrl] + [N].';
I[8][1][1][1]='Correct';
I[8][1][1][2] = 1;
I[8][1][2] = new Array();
I[8][1][2][0]='Click the New Page button on the standard toolbar.';
I[8][1][2][1]='Correct';
I[8][1][2][2] = 1;
I[8][1][3] = new Array();
I[8][1][3][0]='Select the entire page you\'re working on and delete its contents.';
I[8][1][3][1]='Incorrect';
I[8][1][3][2] = 0;
I[8][2] = 1;

I[9] = new Array();
I[9][0]='Which of the following statements is NOT true?';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='You can add your own words to the spelling dictionary by right-clicking the unrecognized word and selecting Add from the shortcut menu.';
I[9][1][0][1]='Incorrect';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='To find a word or phrase in a Web page, select Edit --> Find from the menu.';
I[9][1][1][1]='Incorrect';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='The Undo function can only undo one action-the last one that you performed.';
I[9][1][2][1]='Correct';
I[9][1][2][2] = 1;
I[9][1][3] = new Array();
I[9][1][3][0]='Pressing [Enter] is different from pressing [Shift] + [Enter] two times.';
I[9][1][3][1]='Incorrect';
I[9][1][3][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='Why would you use the Save As option in the File menu instead of the Save option?';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='To save a file under a new name and/or location.';
I[10][1][0][1]='Correct';
I[10][1][0][2] = 1;
I[10][1][1] = new Array();
I[10][1][1][0]='To send someone an e-mail of a file.';
I[10][1][1][1]='Incorrect';
I[10][1][1][2] = 0;
I[10][1][2] = new Array();
I[10][1][2][0]='To save time.';
I[10][1][2][1]='Incorrect';
I[10][1][2][2] = 0;
I[10][1][3] = new Array();
I[10][1][3][0]='To specify if FrontPage should always create a backup copy of a file.';
I[10][1][3][1]='Incorrect';
I[10][1][3][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='You can only move or copy text by using the Copy, Cut, and Paste buttons. (True or False?)';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='True';
I[11][1][0][1]='False. You can move and copy text by using the drag and drop method.';
I[11][1][0][2] = 0;
I[11][1][1] = new Array();
I[11][1][1][0]='False';
I[11][1][1][1]='False. You can move and copy text by using the drag and drop method.';
I[11][1][1][2] = 1;
I[11][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CalculateScore();
		var CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode;
	OutString += '<tr><td bgcolor="#bbbbee" align="center">';
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed

	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}

	}

//Calculate the score if needed

	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="120,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
