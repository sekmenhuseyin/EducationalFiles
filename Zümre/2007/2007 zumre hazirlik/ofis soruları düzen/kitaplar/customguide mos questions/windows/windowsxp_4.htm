<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head><meta name="author" content="Computer training courseware and elearning."></meta><meta name="keywords" content="Computer training courseware and elearning."></meta>
<title>Microsoft Windows XP - Working with Files and Folders</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie4 && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	LocPath = ReplaceStuff('\'','%27',LocPath);
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = InText.substring(sLoc,z);

		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=0; j<x.length; j++){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}



function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	Stuff = ResolveURLs(Stuff,'parent.location');
	return Stuff;
}


var ExBGColor = '#bbbbee';



var PageBGColor = '#ffffff';



var NavBarColor = '#000066';


var TextColor = '#000000';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = ':-)';
var IncorrectIndicator = ':-(';
var YourScoreIs = 'Your score is ';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'Questions answered correctly first time: ';var ExerciseTitle = 'Microsoft Windows XP - Working with Files and Folders';
var ExerciseSubtitle = 'Multiple-choice exercise';
var Instructions = 'Choose the correct answer for each question.'; //'';
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Correct!';
var DefaultWrong = 'Sorry! Try again.';
var QsToShow = 14;
var ShowOneByOne = false;
var ReadingURL = '';
var EraseFeedback = true;
var Score = 0;

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#000066" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';


NavBar+='<input type="button" value="Quiz Index" onclick=\'parent.location="mos.htm"\'></input>';


NavBar+='</font></td></form></tr>';
if (is.CRAPBrowser){NavBar=ResolveAllURLs(NavBar)};


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000033">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000033">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';

var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#bbbbee" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000000">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#bbbbee"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#bbbbee"><font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#bbbbee" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="#bbbbee" ><input type="button" value="Check"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
//Build the output string
	var OutString = '';
	OutString += '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#bbbbee" align="center">';
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){




//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}

//Write the top frame
	WriteFeedback(Instructions);
}


I = new Array();

I[0] = new Array();
I[0][0]='Computers store information on which types of disks (Select all that apply).';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='Floppy disks.';
I[0][1][0][1]='Right!';
I[0][1][0][2] = 1;
I[0][1][1] = new Array();
I[0][1][1][0]='Hard disks.';
I[0][1][1][1]='Right!';
I[0][1][1][2] = 1;
I[0][1][2] = new Array();
I[0][1][2][0]='Compact discs (CD-ROMs).';
I[0][1][2][1]='Right!';
I[0][1][2][2] = 1;
I[0][1][3] = new Array();
I[0][1][3][0]='Removable disks.';
I[0][1][3][1]='Right!';
I[0][1][3][2] = 1;
I[0][2] = 1;

I[1] = new Array();
I[1][0]='Drives are named with one letter. Most computers have a floppy disk called A: and a hard disk called C: ';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='True';
I[1][1][0][1]='Right!';
I[1][1][0][2] = 1;
I[1][1][1] = new Array();
I[1][1][1][0]='False';
I[1][1][1][1]='Incorrect';
I[1][1][1][2] = 0;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='The purpose of your computer\'s folders is to: (Select all that apply).';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='Lose your important files.';
I[2][1][0][1]='Incorrect';
I[2][1][0][2] = 0;
I[2][1][1] = new Array();
I[2][1][1][0]='Store related files and programs in the same place.';
I[2][1][1][1]='Right!';
I[2][1][1][2] = 1;
I[2][1][2] = new Array();
I[2][1][2][0]='Make it difficult to delete things unless you really know what you\'re doing.';
I[2][1][2][1]='Incorrect';
I[2][1][2][2] = 0;
I[2][1][3] = new Array();
I[2][1][3][0]='Organize related files and information on your computer.';
I[2][1][3][1]='Right!';
I[2][1][3][2] = 1;
I[2][2] = 1;

I[3] = new Array();
I[3][0]='.TXT, .DOC, and .BMP - these are all examples of:';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='Three meaningless letters with a period in front of them.';
I[3][1][0][1]='Incorrect';
I[3][1][0][2] = 0;
I[3][1][1] = new Array();
I[3][1][1][0]='File extensions.';
I[3][1][1][1]='Right! File extensions, which are used to identify the file type.';
I[3][1][1][2] = 1;
I[3][1][2] = new Array();
I[3][1][2][0]='Types of advanced degrees in computers.';
I[3][1][2][1]='Incorrect';
I[3][1][2][2] = 0;
I[3][1][3] = new Array();
I[3][1][3][0]='How confusing computers are.';
I[3][1][3][1]='Incorrect';
I[3][1][3][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='Which program(s) can you use to view and manage the contents of your computer? (Select all that apply).';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='Netscape Navigator.';
I[4][1][0][1]='Incorrect';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='My Computer.';
I[4][1][1][1]='Right!';
I[4][1][1][2] = 1;
I[4][1][2] = new Array();
I[4][1][2][0]='System Sleuth.';
I[4][1][2][1]='Incorrect';
I[4][1][2][2] = 0;
I[4][1][3] = new Array();
I[4][1][3][0]='Windows Explorer.';
I[4][1][3][1]='Right!';
I[4][1][3][2] = 1;
I[4][2] = 1;

I[5] = new Array();
I[5][0]='You open a file or folder by double-clicking it ';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='True';
I[5][1][0][1]='Right!';
I[5][1][0][2] = 1;
I[5][1][1] = new Array();
I[5][1][1][0]='False';
I[5][1][1][1]='Incorrect';
I[5][1][1][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Do this to display the contents of a certain drive or folder:';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='Right-click the drive or folder.';
I[6][1][0][1]='Incorrect';
I[6][1][0][2] = 0;
I[6][1][1] = new Array();
I[6][1][1][0]='Click the drive or folder while holding down the [Alt] key';
I[6][1][1][1]='Incorrect';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='Double-click the drive or folder.';
I[6][1][2][1]='Double-click a folder to open it and display its contents.';
I[6][1][2][2] = 1;
I[6][1][3] = new Array();
I[6][1][3][0]='Triple-click the drive or folder.';
I[6][1][3][1]='Incorrect';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='To view an object\'s properties, right-click the object and select and select Properties from the shortcut menu (True or False?)';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='True';
I[7][1][0][1]='Right!';
I[7][1][0][2] = 1;
I[7][1][1] = new Array();
I[7][1][1][0]='False';
I[7][1][1][1]='Incorrect';
I[7][1][1][2] = 0;
I[7][2] = 0;

I[8] = new Array();
I[8][0]='When you\'re browsing the contents of your computer, do this to move back or up to the previous level or folder (Select all that apply).';
I[8][1] = new Array();
I[8][1][0] = new Array();
I[8][1][0][0]='Click the Up button on the toolbar.';
I[8][1][0][1]='Right!';
I[8][1][0][2] = 1;
I[8][1][1] = new Array();
I[8][1][1][0]='Click the Back button on the toolbar.';
I[8][1][1][1]='Right!';
I[8][1][1][2] = 1;
I[8][1][2] = new Array();
I[8][1][2][0]='Press [Ctrl] + [Z].';
I[8][1][2][1]='Incorrect';
I[8][1][2][2] = 0;
I[8][1][3] = new Array();
I[8][1][3][0]='Click the Address Bar on the toolbar and select the appropriate drive or folder.';
I[8][1][3][1]='Right!';
I[8][1][3][2] = 1;
I[8][2] = 1;

I[9] = new Array();
I[9][0]='Which of the follow statements is NOT true?';
I[9][1] = new Array();
I[9][1][0] = new Array();
I[9][1][0][0]='You can move a file or folder to a new location by dragging and dropping it.';
I[9][1][0][1]='Incorrect';
I[9][1][0][2] = 0;
I[9][1][1] = new Array();
I[9][1][1][0]='You can rename a file or folder by right-clicking it, selecting Rename from the shortcut menu, typing the new name and pressing [Enter].';
I[9][1][1][1]='Incorrect';
I[9][1][1][2] = 0;
I[9][1][2] = new Array();
I[9][1][2][0]='A plus symbol (+) next to a folder in Windows Explorer indicates the folder is locked and cannot be modified or deleted.';
I[9][1][2][1]='Right - A plus symbol (+) next to a folder in Windows Explorer means the folder contains subfolders.';
I[9][1][2][2] = 1;
I[9][1][3] = new Array();
I[9][1][3][0]='Holding down the [Ctrl] key while you\'re dragging and dropping something copies it instead of moving it.';
I[9][1][3][1]='Incorrect';
I[9][1][3][2] = 0;
I[9][2] = 0;

I[10] = new Array();
I[10][0]='Delete a file or folder by clicking it, pressing the [Delete] key, and confirming the deletion (True or False?)';
I[10][1] = new Array();
I[10][1][0] = new Array();
I[10][1][0][0]='True';
I[10][1][0][1]='Right';
I[10][1][0][2] = 1;
I[10][1][1] = new Array();
I[10][1][1][0]='False';
I[10][1][1][1]='Incorrect';
I[10][1][1][2] = 0;
I[10][2] = 0;

I[11] = new Array();
I[11][0]='Do this to select multiple files and folders: (Select all that apply).';
I[11][1] = new Array();
I[11][1][0] = new Array();
I[11][1][0][0]='Click and drag a rectangle around any adjacent files you want to select.';
I[11][1][0][1]='Right!';
I[11][1][0][2] = 1;
I[11][1][1] = new Array();
I[11][1][1][0]='Select File --> Select Multiple Files from the menu, and then click the files you want to select.';
I[11][1][1][1]='Incorrect';
I[11][1][1][2] = 0;
I[11][1][2] = new Array();
I[11][1][2][0]='Click the first file you want to select, press and hold down the [Shift] key and click the last file you want to select.';
I[11][1][2][1]='Right!';
I[11][1][2][2] = 1;
I[11][1][3] = new Array();
I[11][1][3][0]='Hold down the [Ctrl] key and click the files you want to select.';
I[11][1][3][1]='Right!';
I[11][1][3][2] = 1;
I[11][2] = 0;

I[12] = new Array();
I[12][0]='Which of the following statements is NOT true? (Select all that apply).';
I[12][1] = new Array();
I[12][1][0] = new Array();
I[12][1][0][0]='You can find a file on your computer by clicking the Start button, selecting Find --> Files and Folders, enter what you want to search for and click Find Now.';
I[12][1][0][1]='Incorrect';
I[12][1][0][2] = 0;
I[12][1][1] = new Array();
I[12][1][1][0]='Open Windows Explorer by clicking the Start button and selecting Programs --> Windows Explorer.';
I[12][1][1][1]='Incorrect';
I[12][1][1][2] = 0;
I[12][1][2] = new Array();
I[12][1][2][0]='To save a file in a location other than the program\'s default folder you have to save the file, then use My Computer or Windows Explorer to move the file to the desired location.';
I[12][1][2][1]='Right! You can easily save a file in a different location by opening the drive and/or folder where you want to save the file and clicking Save.';
I[12][1][2][2] = 1;
I[12][1][3] = new Array();
I[12][1][3][0]='You can display the contents of a drive or folder using Large Icons, Small Icons, List, or Details View.';
I[12][1][3][1]='Incorrect';
I[12][1][3][2] = 0;
I[12][2] = 0;

I[13] = new Array();
I[13][0]='The three-letter extension of a file is normally displayed in Windows XP? (True or False?)';
I[13][1] = new Array();
I[13][1][0] = new Array();
I[13][1][0][0]='True';
I[13][1][0][1]='Incorrect';
I[13][1][0][2] = 0;
I[13][1][1] = new Array();
I[13][1][1][0]='False';
I[13][1][1][1]='Right!';
I[13][1][1][2] = 1;
I[13][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Wrong tries at this question so far
		Status[x][3] = 0; //For storing score out of one on this question
	}
}

function UpdateQuestionStatus(QNum){
	if (Status[QNum][2] >= Status[QNum][1].length-1){
		Status[QNum][0] = 1;
		for (var i=0; i<Status[QNum][1].length; i++){
			if (Status[QNum][1][i] == '0'){
				Status[QNum][1][i] = 'R';
			}
		}
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
	var CurrScore = '';
	if ((ContinuousScoring == true)&&(EraseFeedback == true)){
		CalculateScore();
		var CurrScore = YourScoreIs + ' ' + Score + '%.';
		WriteFeedback(CurrScore);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000ff" vlink="#0000cc">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode;
	OutString += '<tr><td bgcolor="#bbbbee" align="center">';
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
//Eliminate feedback from previous question
	if (EraseFeedback == true){
		WriteFeedback('');
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		if (TotWrong > 0){
			Status[QNum][2]++;
		}
		if (TotWrong == 0){
			Status[QNum][0] = 1;
//Calculate the score for this question as a floating-point fraction of 1
			Status[QNum][3] =  ((Status[QNum][1].length - Status[QNum][2]) - 1) / (Status[QNum][1].length - 1);
//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed

	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
//Calculate the score for this question as a floating-point fraction of 1
			var PossibleWrongs = 0;
			for (var i=0; i<I[QNum][1].length; i++){
				if (I[QNum][1][i][2] == 0){
					PossibleWrongs++;
				}
			}

			if (PossibleWrongs == 0){PossibleWrongs = 1;}

			Status[QNum][3] = 1 - (Status[QNum][2]/PossibleWrongs);

//If less than zero, set to zero
			if (Status[QNum][3] < 0){Status[QNum][3] = 0;}
		}
		else{
			if (Status[QNum][1][ANum] != 'W'){
				Status[QNum][1][ANum] = 'W';
				MarkAnswer(QNum, ANum, false);
				Status[QNum][2]++; //increment wrong tries for this Q
			}
		}
	}

	UpdateQuestionStatus(QNum);

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}

	}

//Calculate the score if needed

	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			CalculateScore();
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			EraseFeedback = false;
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 0){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function CalculateScore(){
	var TriedQs = 0;
	var TotalScore = 0;
	for (var i=0; i<Status.length; i++){
		if ((Status[i][2] > 0)||(Status[i][3] == 1)){
			TriedQs++;
			TotalScore += Status[i][3];
		}
	}
	if (TriedQs == 0){
		Score = 0;
	}
	else{
		Score = (Math.floor(100 * (TotalScore/TriedQs)));
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="120,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
